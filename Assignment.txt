-- 7. Program
/*Create a SQL query that will return all employees with "Sales" at the start of their job titles. Return the columns for job title, last name, middle name, and first name.*/
SELECT p.FirstName+' '+ISNULL(p.MiddleName+' ',' ')+p.LastName AS Employee_Name,
	e.JobTitle
	FROM HumanResources.Employee e
	JOIN Person.Person p ON e.BusinessEntityID=p.BusinessEntityID
	WHERE e.JobTitle LIKE '%Sales%';


-- 6. Program
/*To find out if any of the current customers have placed an order or not, create a report using the following SQL statement: customer name, city, order number, order date, and order amount in ascending order based on the order date.*/
SELECT p.FirstName+' '+ISNULL(p.MiddleName+' ',' ')+p.LastName AS Customer_Name,
	addr.City,
	soh.SalesOrderNumber AS Order_Number,
	soh.OrderDate,
	soh.TotalDue AS Order_Amount
	FROM Sales.Customer c
	JOIN Person.Person p ON C.PersonID=P.BusinessEntityID
	JOIN Sales.SalesOrderHeader soh ON soh.CustomerID=c.CustomerID
	JOIN Person.Address addr ON addr.AddressID=soh.ShipToAddressID
	ORDER BY soh.OrderDate;

-- 5. Program
/*Write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city.*/
SELECT soh.SalesOrderNumber AS Order_Number,
	p.FirstName+' '+ISNULL(p.MiddleName+' ',' ')+p.LastName AS Customer_Name,
	addr.City,
	soh.OrderDate,
	soh.TotalDue AS Purch_Amount
	FROM Sales.Customer c
	JOIN Person.Person p ON C.PersonID=P.BusinessEntityID
	JOIN Sales.SalesOrderHeader soh ON soh.CustomerID=c.CustomerID
	JOIN Person.Address addr ON addr.AddressID=soh.ShipToAddressID
	WHERE TotalDue BETWEEN 500 AND 2000;

-- 4. Program
/*Create a SQL query to compare employees' year-to-date sales. Return TerritoryName, SalesYTD, BusinessEntityID, and Sales from the prior year (PrevRepSales). The results are sorted by territorial name in ascending order.*/
SELECT st.Name AS TerritoryName,
    sp.SalesYTD,
    sp.BusinessEntityID,
    sp.SalesLastYear AS PrevRepSales
	FROM Sales.SalesPerson sp
	JOIN Sales.SalesTerritory st ON sp.TerritoryID = st.TerritoryID
	ORDER BY st.Name ASC;

-- 3. Program
/*Write a SQL query to calculate the difference between the maximum salary and the salary of all the employees who work in the department of ID 80. Return job title, employee name and salary difference.*/
SELECT e.JobTitle,
	p.FirstName+' '+LastName AS Employee_Name,
	eph.Rate*2080 AS Salary,   --40hr/week*52weeks/year
	(MAX(eph.Rate) OVER()-eph.Rate)*2080 AS SalaryDiff 
	FROM HumanResources.Employee e
	JOIN HumanResources.EmployeePayHistory eph ON eph.BusinessEntityID=e.BusinessEntityID
	JOIN Person.Person p ON p.BusinessEntityID=e.BusinessEntityID
	JOIN HumanResources.EmployeeDepartmentHistory edh ON edh.BusinessEntityID=p.BusinessEntityID
	JOIN HumanResources.Department d ON d.DepartmentID=edh.DepartmentID
	WHERE d.DepartmentID IN (14)
	GROUP BY e.JobTitle,p.FirstName,p.LastName,eph.Rate;

-- 2. Program
/*To list every salesperson, along with the customer's name, city, grade, order number, date, and amount, create a SQL query.Requirement for choosing the salesmen's list:
1. Salespeople who work for one or more clients, or  Salespeople who haven't joined any clients yet.
2. Requirements for choosing a customer list:placed one or more orders with their salesman, or  didn't place any orders.*/
SELECT sp.BusinessEntityID AS [Salesperson ID],
    spPerson.FirstName + ' ' + spPerson.LastName AS [Salesperson Name],
    custPerson.FirstName + ' ' + custPerson.LastName AS [Customer Name],
    addr.City AS [Customer City],
    soh.SalesOrderID AS [Order Number],
    soh.OrderDate AS [Order Date],
    soh.TotalDue AS [Order Amount]
	FROM Sales.SalesPerson sp
	JOIN Person.Person spPerson ON sp.BusinessEntityID = spPerson.BusinessEntityID

	LEFT JOIN Sales.SalesOrderHeader soh ON sp.BusinessEntityID = soh.SalesPersonID

	LEFT JOIN Sales.Customer cust ON soh.CustomerID = cust.CustomerID
	LEFT JOIN Person.Person custPerson ON cust.PersonID = custPerson.BusinessEntityID

	LEFT JOIN Person.BusinessEntityAddress bea ON cust.PersonID = bea.BusinessEntityID
	LEFT JOIN Person.Address addr ON bea.AddressID = addr.AddressID


-- 1. Program
/*Write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission.*/
SELECT DISTINCT
    p.FirstName + ' ' + p.LastName AS CustomerName,
    addr.City AS Customer_City,
    pp_s.FirstName + ' ' + pp_s.LastName AS Salesman,
    addr_s.City AS Salesman_City,
    sp.CommissionPct 
	FROM Sales.Customer c
	JOIN Person.Person p ON c.PersonID = p.BusinessEntityID

	JOIN Person.BusinessEntityAddress bea ON c.StoreID = bea.BusinessEntityID
	JOIN Person.Address addr ON bea.AddressID = addr.AddressID

	JOIN Sales.SalesOrderHeader soh ON c.CustomerID = soh.CustomerID
	JOIN Sales.SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID

	JOIN Person.Person pp_s ON sp.BusinessEntityID = pp_s.BusinessEntityID
	JOIN Person.BusinessEntityAddress bea_s ON pp_s.BusinessEntityID = bea_s.BusinessEntityID
	JOIN Person.Address addr_s ON bea_s.AddressID = addr_s.AddressID

	WHERE sp.CommissionPct > 0.0012 AND addr.City <> addr_s.City;
